<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–ü–æ—Å–∞–¥–∫–∞ –ø—à–µ–Ω–∏—Ü—ã</title>
    <style>
        body {
            margin: 0;
            padding: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            background-color: #87CEEB;
            font-family: Arial, sans-serif;
            overflow: hidden;
        }

        canvas {
            display: block;
            background-color: transparent;
        }

        .controls {
            position: absolute;
            bottom: 20px;
            display: flex;
            gap: 10px;
        }

        .controls button {
            padding: 10px 20px;
            font-size: 16px;
            cursor: pointer;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 5px;
        }

        .controls button:active {
            background-color: #45a049;
        }

        .message {
            position: absolute;
            top: 10px;
            left: 50%;
            transform: translateX(-50%);
            background-color: rgba(0, 0, 0, 0.7);
            color: white;
            padding: 10px;
            border-radius: 5px;
            font-size: 16px;
            display: none;
        }
    </style>
</head>
<body>
    <canvas id="gameCanvas"></canvas>
    <div class="controls">
        <button id="plowButton">ü™¥ –†–∞–∑—Ä—ã—Ö–ª–∏—Ç—å</button>
        <button id="waterButton">üíß –õ–µ–π–∫–∞</button>
        <button id="seedButton">üå± –ó–µ—Ä–Ω—ã—à–∫–æ</button>
    </div>
    <div class="message" id="message"></div>

    <script>
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');
        const message = document.getElementById('message');
        const plowButton = document.getElementById('plowButton');
        const waterButton = document.getElementById('waterButton');
        const seedButton = document.getElementById('seedButton');

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        const GROUND_HEIGHT = 100; // –í—ã—Å–æ—Ç–∞ –∑–µ–º–ª–∏
        const GROUND_COLOR = '#5C4033'; // –¢–µ–º–Ω–æ-–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π —Ü–≤–µ—Ç –∑–µ–º–ª–∏
        const DARKEN_COLOR = '#3E2D1E'; // –¶–≤–µ—Ç –≤–∑—Ä—ã—Ö–ª–µ–Ω–Ω–æ–π –∑–µ–º–ª–∏
        const WATER_EMOJI = 'üíß'; // –≠–º–æ–¥–∑–∏ –≤–æ–¥—ã
        const SEED_EMOJI = 'üå±'; // –≠–º–æ–¥–∑–∏ –∑–µ—Ä–Ω—ã—à–∫–∞
        const STEM_COLOR = 'green'; // –¶–≤–µ—Ç —Å—Ç–µ–±–ª—è
        const GRAVITY = 0.5; // –ì—Ä–∞–≤–∏—Ç–∞—Ü–∏—è –¥–ª—è –∫–∞–ø–µ–ª—å –∏ –∑–µ—Ä–Ω—ã—à–µ–∫
        const DEFORMATION_STRENGTH = 5; // –°–∏–ª–∞ –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∑–µ–º–ª–∏
        const SMOOTHING_FACTOR = 0.3; // –°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –∑–µ–º–ª–∏
        const STEM_OFFSET = 3; // –°–º–µ—â–µ–Ω–∏–µ —Å—Ç–µ–±–ª—è –≤–Ω–∏–∑ (–≤ 10 —Ä–∞–∑ –º–µ–Ω—å—à–µ)
        const WATER_SPOT_DURATION = 15000; // 15 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ç–µ–º–Ω–æ–≥–æ –ø—è—Ç–Ω–∞

        let ground = []; // –ú–∞—Å—Å–∏–≤ —Ç–æ—á–µ–∫ –∑–µ–º–ª–∏
        let waterDrops = []; // –ú–∞—Å—Å–∏–≤ –∫–∞–ø–µ–ª—å –≤–æ–¥—ã
        let seeds = []; // –ú–∞—Å—Å–∏–≤ –∑–µ—Ä–Ω—ã—à–µ–∫
        let stems = []; // –ú–∞—Å—Å–∏–≤ —Å—Ç–µ–±–ª–µ–π
        let waterSpots = []; // –ú–∞—Å—Å–∏–≤ —Ç–µ–º–Ω—ã—Ö –ø—è—Ç–µ–Ω –æ—Ç –≤–æ–¥—ã
        let isPlowing = false;
        let isWatering = false;
        let isSeeding = false;
        let isMouseDown = false;

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–µ–º–ª–∏
        function initGround() {
            for (let i = 0; i <= canvas.width; i += 10) {
                ground.push({ x: i, y: canvas.height - GROUND_HEIGHT, darken: 0 });
            }
        }

        // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∑–µ–º–ª–∏
        function drawGround() {
            ctx.beginPath();
            ctx.moveTo(0, canvas.height);
            ground.forEach(point => {
                ctx.lineTo(point.x, point.y);
                // –ó–∞—Ç–µ–º–Ω–µ–Ω–∏–µ –∑–µ–º–ª–∏
                ctx.fillStyle = `rgba(62, 45, 30, ${point.darken})`;
                ctx.fillRect(point.x - 5, point.y, 10, GROUND_HEIGHT);
            });
            ctx.lineTo(canvas.width, canvas.height);
            ctx.closePath();
            ctx.fillStyle = GROUND_COLOR;
            ctx.fill();
        }

        // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≤–æ–¥—ã (—ç–º–æ–¥–∑–∏ –∫–∞–ø–µ–ª—å–∫–∏)
        function drawWater() {
            waterDrops.forEach(drop => {
                ctx.font = '20px Arial';
                ctx.fillText(WATER_EMOJI, drop.x, drop.y);
            });
        }

        // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ç–µ–º–Ω—ã—Ö –ø—è—Ç–µ–Ω –æ—Ç –≤–æ–¥—ã (–ø–æ–ª–æ—Å–∫–∞, —Ä–∞—Å—Ç–µ–∫–∞—é—â–∞—è—Å—è –≤–Ω–∏–∑)
        function drawWaterSpots() {
            waterSpots.forEach(spot => {
                ctx.fillStyle = DARKEN_COLOR;
                ctx.beginPath();
                ctx.moveTo(spot.x - 10, spot.y);
                ctx.lineTo(spot.x + 10, spot.y);
                ctx.lineTo(spot.x + 10, spot.y + 20);
                ctx.lineTo(spot.x - 10, spot.y + 20);
                ctx.closePath();
                ctx.fill();
            });
        }

        // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∑–µ—Ä–Ω—ã—à–µ–∫ (—ç–º–æ–¥–∑–∏ —Å–µ–º–µ—á–∫–∞)
        function drawSeeds() {
            seeds.forEach(seed => {
                ctx.font = '20px Arial';
                ctx.fillText(SEED_EMOJI, seed.x, seed.y);
            });
        }

        // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å—Ç–µ–±–ª–µ–π –ø—à–µ–Ω–∏—Ü—ã
        function drawStems() {
            stems.forEach(stem => {
                const groundY = getGroundHeight(stem.x); // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≤—ã—Å–æ—Ç—É –∑–µ–º–ª–∏
                const stemBaseY = groundY - STEM_OFFSET; // –ë–∞–∑–∞ —Å—Ç–µ–±–ª—è –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ –∑–µ–º–ª–µ

                // –û—Å–Ω–æ–≤–Ω–æ–π —Å—Ç–µ–±–µ–ª—å
                ctx.strokeStyle = STEM_COLOR;
                ctx.lineWidth = 3;
                ctx.beginPath();
                ctx.moveTo(stem.x, stemBaseY);
                ctx.lineTo(stem.x, stemBaseY - stem.height);
                ctx.stroke();

                // –ö–æ–ª–æ—Å–æ–∫
                if (stem.height > 20) {
                    // –ñ–µ–ª—Ç—ã–π –∫—Ä—É–∂–æ–∫ (–∫–æ–ª–æ—Å–æ–∫)
                    ctx.fillStyle = 'gold';
                    ctx.beginPath();
                    ctx.ellipse(stem.x, stemBaseY - stem.height, 5, 10, 0, 0, Math.PI * 2);
                    ctx.fill();

                    // –ó–µ—Ä–Ω—ã—à–∫–∏ –Ω–∞ –∫–æ–ª–æ—Å–∫–µ
                    const seedCount = stem.seedCount; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–µ—Ä–Ω—ã—à–µ–∫
                    const columnHeight = Math.ceil((seedCount - 1) / 2); // –í—ã—Å–æ—Ç–∞ —Å—Ç–æ–ª–±–∏–∫–æ–≤
                    const seedSpacing = 5; // –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –∑–µ—Ä–Ω—ã—à–∫–∞–º–∏

                    // –õ–µ–≤—ã–π —Å—Ç–æ–ª–±–∏–∫
                    for (let i = 0; i < columnHeight; i++) {
                        ctx.fillStyle = 'brown';
                        ctx.beginPath();
                        ctx.arc(stem.x - 5, stemBaseY - stem.height - i * seedSpacing, 2, 0, Math.PI * 2);
                        ctx.fill();
                    }

                    // –ü—Ä–∞–≤—ã–π —Å—Ç–æ–ª–±–∏–∫
                    for (let i = 0; i < columnHeight; i++) {
                        ctx.fillStyle = 'brown';
                        ctx.beginPath();
                        ctx.arc(stem.x + 5, stemBaseY - stem.height - i * seedSpacing, 2, 0, Math.PI * 2);
                        ctx.fill();
                    }

                    // –í–µ—Ä—Ö–Ω–µ–µ –∑–µ—Ä–Ω—ã—à–∫–æ
                    if (seedCount % 2 !== 0) {
                        ctx.fillStyle = 'brown';
                        ctx.beginPath();
                        ctx.arc(stem.x, stemBaseY - stem.height - columnHeight * seedSpacing, 2, 0, Math.PI * 2);
                        ctx.fill();
                    }

                    // –†–∞–∑–≤–µ—Ç–≤–ª–µ–Ω–∏—è —Å –ª–∏—Å—Ç–∏–∫–∞–º–∏
                    if (stem.height > 40) {
                        // –õ–µ–≤–æ–µ —Ä–∞–∑–≤–µ—Ç–≤–ª–µ–Ω–∏–µ
                        ctx.strokeStyle = STEM_COLOR;
                        ctx.lineWidth = 2;
                        ctx.beginPath();
                        ctx.moveTo(stem.x, stemBaseY - stem.height * 0.6);
                        ctx.lineTo(stem.x - 15, stemBaseY - stem.height * 0.6 - 20);
                        ctx.stroke();

                        // –õ–∏—Å—Ç–∏–∫ –Ω–∞ –ª–µ–≤–æ–º —Ä–∞–∑–≤–µ—Ç–≤–ª–µ–Ω–∏–∏
                        ctx.fillStyle = STEM_COLOR;
                        ctx.beginPath();
                        ctx.arc(stem.x - 15, stemBaseY - stem.height * 0.6 - 20, 3, 0, Math.PI * 2);
                        ctx.fill();

                        // –ü—Ä–∞–≤–æ–µ —Ä–∞–∑–≤–µ—Ç–≤–ª–µ–Ω–∏–µ (—á—É—Ç—å –≤—ã—à–µ)
                        ctx.beginPath();
                        ctx.moveTo(stem.x, stemBaseY - stem.height * 0.5);
                        ctx.lineTo(stem.x + 15, stemBaseY - stem.height * 0.5 - 20);
                        ctx.stroke();

                        // –õ–∏—Å—Ç–∏–∫ –Ω–∞ –ø—Ä–∞–≤–æ–º —Ä–∞–∑–≤–µ—Ç–≤–ª–µ–Ω–∏–∏
                        ctx.beginPath();
                        ctx.arc(stem.x + 15, stemBaseY - stem.height * 0.5 - 20, 3, 0, Math.PI * 2);
                        ctx.fill();
                    }
                }
            });
        }

        // –î–µ—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–µ–º–ª–∏
        function deformGround(x, strength) {
            ground.forEach(point => {
                const distance = Math.abs(point.x - x);
                if (distance < 50) {
                    point.y += (strength * (50 - distance)) / 50;
                    point.darken = Math.min(1, point.darken + 0.05); // –ó–∞—Ç–µ–º–Ω–µ–Ω–∏–µ –∑–µ–º–ª–∏
                }
            });
        }

        // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–º–Ω–æ–≥–æ –ø—è—Ç–Ω–∞ –æ—Ç –≤–æ–¥—ã (–ø–æ–ª–æ—Å–∫–∞)
        function createWaterSpot(x, y) {
            waterSpots.push({ x, y, createdAt: Date.now() });
        }

        // –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Ç–µ–º–Ω—ã—Ö –ø—è—Ç–µ–Ω
        function removeOldWaterSpots() {
            const now = Date.now();
            waterSpots = waterSpots.filter(spot => now - spot.createdAt < WATER_SPOT_DURATION);
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —Ç–µ–º–Ω–æ–µ –ø—è—Ç–Ω–æ –ø–æ–¥ —Ç–æ—á–∫–æ–π
        function isOnWaterSpot(x, y) {
            return waterSpots.some(spot => {
                const distanceX = Math.abs(x - spot.x);
                const distanceY = Math.abs(y - spot.y);
                return distanceX < 10 && distanceY < 20; // –ü–æ–ª–æ—Å–∫–∞ —à–∏—Ä–∏–Ω–æ–π 20px –∏ –≤—ã—Å–æ—Ç–æ–π 40px
            });
        }

        // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã—Å–æ—Ç—ã –∑–µ–º–ª–∏ –≤ —Ç–æ—á–∫–µ X
        function getGroundHeight(x) {
            const point = ground.find(p => Math.abs(p.x - x) < 10);
            return point ? point.y : canvas.height - GROUND_HEIGHT;
        }

        // –§–∏–∑–∏–∫–∞ –¥–ª—è –∫–∞–ø–µ–ª—å –∏ –∑–µ—Ä–Ω—ã—à–µ–∫
        function updatePhysics() {
            // –ö–∞–ø–ª–∏ –≤–æ–¥—ã
            waterDrops.forEach(drop => {
                drop.y += GRAVITY * 2; // –ü–∞–¥–µ–Ω–∏–µ –∫–∞–ø–ª–∏
                const groundY = getGroundHeight(drop.x);
                if (drop.y >= groundY) {
                    drop.y = groundY;
                    createWaterSpot(drop.x, drop.y); // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–º–Ω–æ–≥–æ –ø—è—Ç–Ω–∞
                    waterDrops.splice(waterDrops.indexOf(drop), 1); // –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–ø–ª–∏
                }
            });

            // –ó–µ—Ä–Ω—ã—à–∫–∏
            seeds.forEach(seed => {
                seed.y += GRAVITY; // –ü–∞–¥–µ–Ω–∏–µ –∑–µ—Ä–Ω—ã—à–∫–∞
                const groundY = getGroundHeight(seed.x);
                if (seed.y >= groundY - STEM_OFFSET) {
                    seed.y = groundY - STEM_OFFSET; // –ü—Ä–æ–≤–∞–ª–∏–≤–∞–Ω–∏–µ –Ω–∞ 3px
                    const seedCount = isOnWaterSpot(seed.x, seed.y) ? [11, 13][Math.floor(Math.random() * 2)] : [7, 9][Math.floor(Math.random() * 2)];
                    stems.push({ x: seed.x, y: seed.y, height: 0, seedCount }); // –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–µ–±–ª—è
                    seeds.splice(seeds.indexOf(seed), 1); // –£–¥–∞–ª–µ–Ω–∏–µ –∑–µ—Ä–Ω—ã—à–∫–∞
                }
            });

            // –†–æ—Å—Ç —Å—Ç–µ–±–ª–µ–π
            stems.forEach(stem => {
                if (stem.height < 100) {
                    stem.height += 0.5; // –ê–Ω–∏–º–∞—Ü–∏—è —Ä–æ—Å—Ç–∞
                }
            });

            // –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Ç–µ–º–Ω—ã—Ö –ø—è—Ç–µ–Ω
            removeOldWaterSpots();
        }

        // –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        function showMessage(text) {
            message.textContent = text;
            message.style.display = 'block';
            setTimeout(() => {
                message.style.display = 'none';
            }, 2000);
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
        function initGame() {
            canvas.width = window.innerWidth * 0.9;
            canvas.height = window.innerHeight * 0.9;
            initGround();
            showMessage('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è!');
        }

        // –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∏–≥—Ä—ã
        function gameLoop() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            drawGround();
            drawWater();
            drawWaterSpots();
            drawSeeds();
            drawStems();
            updatePhysics();
            requestAnimationFrame(gameLoop);
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Å–∞–Ω–∏–π/–∫–ª–∏–∫–æ–≤
        canvas.addEventListener('mousedown', (e) => {
            isMouseDown = true;
            if (isPlowing) {
                deformGround(e.offsetX, -DEFORMATION_STRENGTH);
            } else if (isWatering) {
                waterDrops.push({ x: e.offsetX, y: e.offsetY });
            } else if (isSeeding) {
                seeds.push({ x: e.offsetX, y: e.offsetY });
            }
        });

        canvas.addEventListener('mousemove', (e) => {
            if (isMouseDown) {
                if (isPlowing) {
                    deformGround(e.offsetX, -DEFORMATION_STRENGTH);
                } else if (isWatering) {
                    waterDrops.push({ x: e.offsetX, y: e.offsetY });
                } else if (isSeeding) {
                    seeds.push({ x: e.offsetX, y: e.offsetY });
                }
            }
        });

        canvas.addEventListener('mouseup', () => {
            isMouseDown = false;
        });

        // –ö–Ω–æ–ø–∫–∞ —Ä–∞–∑—Ä—ã—Ö–ª–µ–Ω–∏—è
        plowButton.addEventListener('click', () => {
            isPlowing = true;
            isWatering = false;
            isSeeding = false;
            showMessage('–†–∞–∑—Ä—ã—Ö–ª—è–π—Ç–µ –∑–µ–º–ª—é, –∑–∞–∂–∏–º–∞—è –∏ –ø—Ä–æ–≤–æ–¥—è –ø–æ —ç–∫—Ä–∞–Ω—É!');
        });

        // –ö–Ω–æ–ø–∫–∞ –ª–µ–π–∫–∏
        waterButton.addEventListener('click', () => {
            isPlowing = false;
            isWatering = true;
            isSeeding = false;
            showMessage('–ü–æ–ª–∏–≤–∞–π—Ç–µ –∑–µ–º–ª—é, –∑–∞–∂–∏–º–∞—è –∏ –ø—Ä–æ–≤–æ–¥—è –ø–æ —ç–∫—Ä–∞–Ω—É!');
        });

        // –ö–Ω–æ–ø–∫–∞ –∑–µ—Ä–Ω—ã—à–∫–∞
        seedButton.addEventListener('click', () => {
            isPlowing = false;
            isWatering = false;
            isSeeding = true;
            showMessage('–°–∞–∂–∞–π—Ç–µ –∑–µ—Ä–Ω—ã—à–∫–∏, –∑–∞–∂–∏–º–∞—è –∏ –ø—Ä–æ–≤–æ–¥—è –ø–æ —ç–∫—Ä–∞–Ω—É!');
        });

        // –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
        initGame();
        gameLoop();
    </script>
</body>
</html>
